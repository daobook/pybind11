# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017, Wenzel Jakob
# This file is distributed under the same license as the pybind11 package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: pybind11 2.10.0.dev1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-05-31 12:45+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.10.1\n"

#: ../../benchmark.rst:2
msgid "Benchmark"
msgstr ""

#: ../../benchmark.rst:4
msgid ""
"The following is the result of a synthetic benchmark comparing both "
"compilation time and module size of pybind11 against Boost.Python. A "
"detailed report about a Boost.Python to pybind11 conversion of a real "
"project is available here: [#f1]_."
msgstr ""

#: ../../benchmark.rst:8
msgid "http://graylab.jhu.edu/RosettaCon2016/PyRosetta-4.pdf"
msgstr ""

#: ../../benchmark.rst:11
msgid "Setup"
msgstr ""

#: ../../benchmark.rst:13
msgid ""
"A python script (see the ``docs/benchmark.py`` file) was used to generate"
" a set of files with dummy classes whose count increases for each "
"successive benchmark (between 1 and 2048 classes in powers of two). Each "
"class has four methods with a randomly generated signature with a return "
"value and four arguments. (There was no particular reason for this setup "
"other than the desire to generate many unique function signatures whose "
"count could be controlled in a simple way.)"
msgstr ""

#: ../../benchmark.rst:20
msgid "Here is an example of the binding code for one class:"
msgstr ""

#: ../../benchmark.rst:44
msgid ""
"The Boost.Python version looks almost identical except that a return "
"value policy had to be specified as an argument to ``def()``. For both "
"libraries, compilation was done with"
msgstr ""

#: ../../benchmark.rst:52
msgid "and the following compilation flags"
msgstr ""

#: ../../benchmark.rst:59
msgid "Compilation time"
msgstr ""

#: ../../benchmark.rst:61
msgid ""
"The following log-log plot shows how the compilation time grows for an "
"increasing number of class and function declarations. pybind11 includes "
"many fewer headers, which initially leads to shorter compilation times, "
"but the performance is ultimately fairly similar (pybind11 is 19.8 "
"seconds faster for the largest largest file with 2048 classes and a total"
" of 8192 methods -- a modest **1.2x** speedup relative to Boost.Python, "
"which required 116.35 seconds)."
msgstr ""

#: ../../benchmark.rst:78
msgid "Module size"
msgstr ""

#: ../../benchmark.rst:80
msgid ""
"Differences between the two libraries become much more pronounced when "
"considering the file size of the generated Python plugin: for the largest"
" file, the binary generated by Boost.Python required 16.8 MiB, which was "
"**2.17 times** / **9.1 megabytes** larger than the output generated by "
"pybind11. For very small inputs, Boost.Python has an edge in the plot "
"below -- however, note that it stores many definitions in an external "
"library, whose size was not included here, hence the comparison is "
"slightly shifted in Boost.Python's favor."
msgstr ""

