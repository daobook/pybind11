# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017, Wenzel Jakob
# This file is distributed under the same license as the pybind11 package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: pybind11 2.10.0.dev1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-05-31 12:45+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.10.1\n"

#: ../../advanced/pycpp/utilities.rst:2
msgid "Utilities"
msgstr ""

#: ../../advanced/pycpp/utilities.rst:5
msgid "Using Python's print function in C++"
msgstr ""

#: ../../advanced/pycpp/utilities.rst:7
msgid ""
"The usual way to write output in C++ is using ``std::cout`` while in "
"Python one would use ``print``. Since these methods use different "
"buffers, mixing them can lead to output order issues. To resolve this, "
"pybind11 modules can use the :func:`py::print` function which writes to "
"Python's ``sys.stdout`` for consistency."
msgstr ""

#: ../../advanced/pycpp/utilities.rst:12
msgid ""
"Python's ``print`` function is replicated in the C++ API including "
"optional keyword arguments ``sep``, ``end``, ``file``, ``flush``. "
"Everything works as expected in Python:"
msgstr ""

#: ../../advanced/pycpp/utilities.rst:27
msgid "Capturing standard output from ostream"
msgstr ""

#: ../../advanced/pycpp/utilities.rst:29
msgid ""
"Often, a library will use the streams ``std::cout`` and ``std::cerr`` to "
"print, but this does not play well with Python's standard ``sys.stdout`` "
"and ``sys.stderr`` redirection. Replacing a library's printing with "
"``py::print <print>`` may not be feasible. This can be fixed using a "
"guard around the library function that redirects output to the "
"corresponding Python streams:"
msgstr ""

#: ../../advanced/pycpp/utilities.rst:52
msgid ""
"The implementation in ``pybind11/iostream.h`` is NOT thread safe. "
"Multiple threads writing to a redirected ostream concurrently cause data "
"races and potentially buffer overflows. Therefore it is currently a "
"requirement that all (possibly) concurrent redirected ostream writes are "
"protected by a mutex. #HelpAppreciated: Work on iostream.h thread safety."
" For more background see the discussions under `PR #2982 "
"<https://github.com/pybind/pybind11/pull/2982>`_ and `PR #2995 "
"<https://github.com/pybind/pybind11/pull/2995>`_."
msgstr ""

#: ../../advanced/pycpp/utilities.rst:61
msgid ""
"This method respects flushes on the output streams and will flush if "
"needed when the scoped guard is destroyed. This allows the output to be "
"redirected in real time, such as to a Jupyter notebook. The two "
"arguments, the C++ stream and the Python output, are optional, and "
"default to standard output if not given. An extra type, "
"``py::scoped_estream_redirect <scoped_estream_redirect>``, is identical "
"except for defaulting to ``std::cerr`` and ``sys.stderr``; this can be "
"useful with ``py::call_guard``, which allows multiple items, but uses the"
" default constructor:"
msgstr ""

#: ../../advanced/pycpp/utilities.rst:76
msgid ""
"The redirection can also be done in Python with the addition of a context"
" manager, using the ``py::add_ostream_redirect() <add_ostream_redirect>``"
" function:"
msgstr ""

#: ../../advanced/pycpp/utilities.rst:83
msgid ""
"The name in Python defaults to ``ostream_redirect`` if no name is passed."
"  This creates the following context manager in Python:"
msgstr ""

#: ../../advanced/pycpp/utilities.rst:91
msgid ""
"It defaults to redirecting both streams, though you can use the keyword "
"arguments to disable one of the streams if needed."
msgstr ""

#: ../../advanced/pycpp/utilities.rst:96
msgid ""
"The above methods will not redirect C-level output to file descriptors, "
"such as ``fprintf``. For those cases, you'll need to redirect the file "
"descriptors either directly in C or with Python's ``os.dup2`` function in"
" an operating-system dependent way."
msgstr ""

#: ../../advanced/pycpp/utilities.rst:104
msgid "Evaluating Python expressions from strings and files"
msgstr ""

#: ../../advanced/pycpp/utilities.rst:106
msgid ""
"pybind11 provides the ``eval``, ``exec`` and ``eval_file`` functions to "
"evaluate Python expressions and statements. The following example "
"illustrates how they can be used."
msgstr ""

#: ../../advanced/pycpp/utilities.rst:132
msgid ""
"C++11 raw string literals are also supported and quite handy for this "
"purpose. The only requirement is that the first statement must be on a "
"new line following the raw string delimiter ``R\"(``, ensuring all lines "
"have common leading indent:"
msgstr ""

#: ../../advanced/pycpp/utilities.rst:149
msgid ""
"`eval` and `eval_file` accept a template parameter that describes how the"
" string/file should be interpreted. Possible choices include "
"``eval_expr`` (isolated expression), ``eval_single_statement`` (a single "
"statement, return value is always ``none``), and ``eval_statements`` "
"(sequence of statements, return value is always ``none``). `eval` "
"defaults to  ``eval_expr``, `eval_file` defaults to ``eval_statements`` "
"and `exec` is just a shortcut for ``eval<eval_statements>``."
msgstr ""

